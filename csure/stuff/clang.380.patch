Index: CMakeLists.txt
===================================================================
--- CMakeLists.txt	(revision 269591)
+++ CMakeLists.txt	(working copy)
@@ -536,6 +536,7 @@
 add_subdirectory(lib)
 add_subdirectory(tools)
 add_subdirectory(runtime)
+add_subdirectory(csure)
 
 option(CLANG_BUILD_EXAMPLES "Build CLANG example programs by default." OFF)
 if (CLANG_BUILD_EXAMPLES)
Index: include/clang/Basic/Attr.td
===================================================================
--- include/clang/Basic/Attr.td	(revision 269591)
+++ include/clang/Basic/Attr.td	(working copy)
@@ -2158,6 +2158,27 @@
   let Documentation = [Undocumented];
 }
 
+def SureLogicStarts : InheritableAttr {
+  let Spellings = [GNU<"starts">,
+                   CXX11<"","starts", 200809>];
+  let Subjects = SubjectList<[Function]>;                   
+  let Args = [StringArgument<"Value">];
+  let Documentation = [Undocumented];
+}
+
+def ValueObject : InheritableAttr {
+  let Spellings = [GNU<"valueObject">,
+                   CXX11<"","valueObject", 200809>];
+  let Subjects = SubjectList<[Record]>;                   
+  let Documentation = [Undocumented];
+}
+
+def ReferenceObject : InheritableAttr {
+  let Spellings = [GNU<"referenceObject">,
+                   CXX11<"","referenceObject", 200809>];
+  let Subjects = SubjectList<[Record]>;                   
+  let Documentation = [Undocumented];
+}
 def OMPThreadPrivateDecl : InheritableAttr {
   // This attribute has no spellings as it is only ever created implicitly.
   let Spellings = [];
Index: lib/Sema/SemaDeclAttr.cpp
===================================================================
--- lib/Sema/SemaDeclAttr.cpp	(revision 269591)
+++ lib/Sema/SemaDeclAttr.cpp	(working copy)
@@ -617,6 +617,40 @@
   return true;
 }
 
+static void handleValueObject(Sema &S, Decl *D, const AttributeList &Attr) {
+  if (Attr.getNumArgs() != 0) {
+	  // TODO
+	  return;
+  }
+
+  D->addAttr(::new (S.Context) ValueObjectAttr(Attr.getRange(), S.Context,
+		  Attr.getAttributeSpellingListIndex()));
+}
+
+static void handleReferenceObject(Sema &S, Decl *D, const AttributeList &Attr) {
+  if (Attr.getNumArgs() != 0) {
+	  // TODO
+	  return;
+  }
+
+  D->addAttr(::new (S.Context) ReferenceObjectAttr(Attr.getRange(), S.Context,
+		  Attr.getAttributeSpellingListIndex()));
+}
+
+static void handleSureLogicStarts(Sema &S, Decl *D, const AttributeList &Attr) {
+  if (Attr.getNumArgs() != 1) {
+	// TODO
+    return;
+  }
+
+  StringRef value;
+  if (!S.checkStringLiteralArgumentAttr(Attr, 0, value))
+    return;
+
+  D->addAttr(::new (S.Context) SureLogicStartsAttr(Attr.getRange(), S.Context, value,
+		                                Attr.getAttributeSpellingListIndex()));
+}
+
 static void handleGuardedByAttr(Sema &S, Decl *D, const AttributeList &Attr) {
   Expr *Arg = nullptr;
   if (!checkGuardedByAttrCommon(S, D, Attr, Arg))
@@ -5466,6 +5500,15 @@
   case AttributeList::AT_TypeTagForDatatype:
     handleTypeTagForDatatypeAttr(S, D, Attr);
     break;
+  case AttributeList::AT_SureLogicStarts:
+	handleSureLogicStarts(S, D, Attr);
+	break;
+  case AttributeList::AT_ValueObject:
+	handleValueObject(S, D, Attr);
+	break;
+  case AttributeList::AT_ReferenceObject:
+	handleReferenceObject(S, D, Attr);
+	break;
   }
 }
 
